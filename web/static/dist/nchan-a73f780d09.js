!function(t,e,s){"use strict";var i=function(m,g){var a={};function s(t){return t?e(t):void 0}function e(t){for(var e in s.prototype)t[e]=s.prototype[e];return t}(function(){var u=["responseType","withCredentials","timeout","onprogress"];a.ajax=function(t,s){var e=t.headers||{},i=t.body,r=t.method||(i?"POST":"GET"),n=false;var a=f(t.cors);function o(t,e){return function(){if(!n){s(a.status===g?t:a.status,a.status===0?"Error":a.response||a.responseText||e,a);n=true}}}a.open(r,t.url,true);var h=a.onload=o(200);a.onreadystatechange=function(){if(a.readyState===4)h()};a.onerror=o(null,"Error");a.ontimeout=o(null,"Timeout");a.onabort=o(null,"Abort");if(i){p(e,"X-Requested-With","XMLHttpRequest");if(!m.FormData||!(i instanceof m.FormData)){p(e,"Content-Type","application/x-www-form-urlencoded")}}for(var c=0,l=u.length,d;c<l;c++){d=u[c];if(t[d]!==g)a[d]=t[d]}for(var d in e)a.setRequestHeader(d,e[d]);a.send(i);return a};function f(t){if(t&&m.XDomainRequest&&!/MSIE 1/.test(navigator.userAgent))return new XDomainRequest;if(m.XMLHttpRequest)return new XMLHttpRequest}function p(t,e,s){t[e]=t[e]||s}})(),s.prototype.on=s.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},s.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},s.prototype.off=s.prototype.removeListener=s.prototype.removeAllListeners=s.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s=this._callbacks["$"+t];if(!s)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i,r=0;r<s.length;r++)if(i=s[r],i===e||i.fn===e){s.splice(r,1);break}return this},s.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),s=this._callbacks["$"+t];if(s){s=s.slice(0);for(var i=0,r=s.length;r>i;++i)s[i].apply(this,e)}return this},s.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},s.prototype.hasListeners=function(t){return!!this.listeners(t).length};var u=Function.prototype.bind?function t(e,s){return e.bind(s)}:function t(e,s){return function(){e.apply(s,arguments)}},i={},r;function t(t,e){if(this===window){throw"use 'new NchanSubscriber(...)' to initialize"}this.url=t;e=e||{};if(typeof e==="string"){e={subscriber:e}}if(e.transport&&!e.subscriber){e.subscriber=e.transport}if(typeof e.subscriber==="string"){e.subscriber=[e.subscriber]}this.desiredTransport=e.subscriber;if(e.shared){if(!("localStorage"in m)){throw"localStorage unavailable for use in shared NchanSubscriber"}var s="NchanSubscriber:"+this.url+":shared:";var i=function(t){return s+t};var r=m.localStorage;this.shared={id:""+Math.random()+Math.random(),key:i,get:function(t){return r.getItem(i(t))},set:function(t,e){return r.setItem(i(t),e)},setWithId:u(function(t,e){return this.shared.set(t,"##"+this.shared.id+":"+e)},this),getWithId:u(function(t){return this.shared.stripIdFromVal(this.shared.get(t))},this),stripIdFromVal:function(t){if(!t){return t}var e=t.indexOf(":");if(t[0]!=t[1]||t[0]!="#"||!e){return t}return t.substring(e+1,t.length)},remove:function(t){return r.removeItem(i(t))},matchEventKey:u(function(t,e){if(t.storageArea&&t.storageArea!=r){return false}return t.key==i(e)},this),matchEventKeyWithId:u(function(t,e){if(this.shared.matchEventKey(t,e)){var s=t.newValue;var i=s.indexOf(":");if(s[0]!=s[1]||s[0]!="#"||!i){return true}var r=s.substring(2,i);return r!=this.shared.id}else{return false}},this),setRole:u(function(t){if(t=="master"&&this.shared.role!="master"){var e=(new Date).getTime()/1e3;this.shared.setWithId("master:created",e);this.shared.setWithId("master:lastSeen",e)}if(t=="slave"&&!this.lastMessageId){this.lastMessageId=this.shared.get("msg:id")}this.shared.role=t;return this},this),demoteToSlave:u(function(){if(this.shared.role!="master"){throw"can't demote non-master to slave"}if(this.running){this.stop();this.shared.setRole("slave");this.initializeTransport();this.start()}else{this.initializeTransport()}},this),maybePromoteToMaster:u(function(){if(!(this.running||this.starting)){return this}if(this.shared.maybePromotingToMaster){return}this.shared.maybePromotingToMaster=true;var r;var n=2e3;var i=0;var t=Math.random();var a=t;var e;var s=u(function(t){var e=parseFloat(this.shared.getWithId("lotteryTime"));var s=parseFloat(this.shared.getWithId("lottery"));var i=!e||e>(new Date).getTime()-n*2;if(i&&s&&(!a||s>a)){a=s}if(!t){r()}},this);s(true);this.shared.setWithId("lottery",t);this.shared.setWithId("lotteryTime",(new Date).getTime()/1e3);var o=u(function(t){if(this.shared.matchEventKeyWithId(t,"lottery")&&t.newValue){i+=1;var e=parseFloat(this.shared.stripIdFromVal(t.newValue));var s=parseFloat(this.shared.stripIdFromVal(t.oldValue));if(s>e){this.shared.setWithId("lottery",s)}if(!a||e>=a){a=e}}},this);m.addEventListener("storage",o);var h=u(function(){this.shared.maybePromotingToMaster=false;m.removeEventListener("storage",o);if(e){clearInterval(e)}if(this.shared&&this.shared.role=="master"){this.shared.remove("lottery");this.shared.remove("lotteryTime")}if(this.running){this.stop();this.initializeTransport();this.start()}else{this.initializeTransport();if(this.starting){this.start()}}},this);r=u(function(){if(t<a){this.shared.setRole("slave");h()}else if(t>=a){if(i==0){this.shared.setRole("master");h()}else{i=0}}},this);e=m.setInterval(s,n)},this),masterCheckInterval:1e4}}this.lastMessageId=e.id||e.msgId;this.reconnect=typeof e.reconnect=="undefined"?true:e.reconnect;this.reconnectTimeout=e.reconnectTimeout||1e3;var n;if(!e.reconnect){n=function(){}}else{var a="NchanSubscriber:"+t+":lastMessageId";var o;if(e.reconnect=="persist"){o="localStorage"in m&&m.localStorage;if(!o)throw"can't use reconnect: 'persist' option: localStorage not available"}else if(e.reconnect=="session"){o="sessionStorage"in m&&m.sessionStorage;if(!o)throw"can't use reconnect: 'session' option: sessionStorage not available"}else{throw"invalid 'reconnect' option value "+e.reconnect}n=u(function(t){if(this.shared&&this.shared.role=="slave")return;o.setItem(a,t)},this);this.lastMessageId=o.getItem(a)}var h=u(function(){if(this.running){this.stop()}if(this.shared&&this.shared.role=="master"){this.shared.setWithId("status","disconnected")}},this);m.addEventListener("beforeunload",h,false);m.addEventListener("DOMContentLoaded",function(){m.removeEventListener("beforeunload",h,false);m.addEventListener("unload",h,false)},false);var c;if(this.shared){c=u(function(t,e){if(this.shared.role!="master"){return}if(t=="message"){this.shared.set("msg:id",e[1]&&e[1].id||"");this.shared.set("msg:content-type",e[1]&&e[1]["content-type"]||"");this.shared.set("msg",e[0])}else if(t=="error"){}else if(t=="connecting"){this.shared.setWithId("status","connecting")}else if(t=="connect"){this.shared.setWithId("status","connected")}else if(t=="reconnect"){this.shared.setWithId("status","reconnecting")}else if(t=="disconnect"){this.shared.setWithId("status","disconnected")}},this)}else{c=function(){}}var l;var d=u(function(){if(!l&&this.running&&this.reconnect&&!this.transport.reconnecting&&!this.transport.doNotReconnect){c("reconnect");l=m.setTimeout(u(function(){l=null;this.stop();this.start()},this),this.reconnectTimeout)}else{c("disconnect")}},this);this.on("message",function t(t,e){this.lastMessageId=e.id;if(e.id){n(e.id)}c("message",[t,e])});this.on("error",function t(e,s){d(e,s);c("error",[e,s])});this.on("connect",function(){this.connected=true;c("connect")});this.on("__disconnect",function t(e,s){this.connected=false;this.emit("disconnect",e,s);d(e,s)})}function n(t,e){if(e){var s=t.match(/(\?.*)$/);t+=(s?"&":"?")+"last_event_id="+encodeURIComponent(e)}return t}return s(t.prototype),t.prototype.initializeTransport=function(t){if(t&&(this.desiredTransport=t),this.shared&&"slave"==this.shared.role)this.transport=new this.SubscriberClass.__slave(u(this.emit,this));else{var e,s=u(function(t){if(!this.SubscriberClass[t])throw"unknown subscriber type "+t;try{return this.transport=new this.SubscriberClass[t](u(this.emit,this)),this.transport}catch(t){}},this);if(this.desiredTransport)for(e=0;e<this.desiredTransport.length&&!s(this.desiredTransport[e]);e++);else for(e in this.SubscriberClass)if(this.SubscriberClass.hasOwnProperty(e)&&"_"!=e[0]&&s(e))break}if(!this.transport)throw"can't use any transport type"},t.prototype.start=function(){if(this.running)throw"Can't start NchanSubscriber, it's already started.";if(this.starting=!0,this.shared){if(i[this.url]&&i[this.url]!=this)throw"Only 1 shared subscriber allowed per url per window/tab.";if(!(i[this.url]=this).shared.role){var t=this.shared.getWithId("status");r=u(function(t){this.shared.matchEventKeyWithId(t,"status")?"disconnected"==this.shared.stripIdFromVal(t.newValue)&&("slave"==this.shared.role?this.shared.maybePromoteToMaster():this.shared.role):"master"==this.shared.role&&this.shared.matchEventKeyWithId(t,"master:created")&&t.newValue&&this.shared.demoteToSlave()},this),m.addEventListener("storage",r),"disconnected"==t?this.shared.maybePromoteToMaster():(this.shared.setRole(t?"slave":"master"),this.initializeTransport())}"master"==this.shared.role?(this.shared.setWithId("status","connecting"),this.transport.listen(this.url,this.lastMessageId),this.running=!0,delete this.starting,this.shared.masterIntervalCheckID=m.setInterval(u(function(){this.shared.setWithId("master:lastSeen",(new Date).getTime()/1e3)},this),.8*this.shared.masterCheckInterval)):"slave"==this.shared.role&&(this.transport.listen(this.url,this.shared),this.running=!0,delete this.starting,this.shared.masterIntervalCheckID=m.setInterval(u(function(){var t=parseFloat(this.shared.getWithId("master:lastSeen"));(!t||t<(new Date).getTime()/1e3-this.shared.masterCheckInterval/1e3)&&this.shared.maybePromoteToMaster()},this),this.shared.masterCheckInterval))}else this.transport||this.initializeTransport(),this.transport.listen(this.url,this.lastMessageId),this.running=!0,delete this.starting;return this},t.prototype.stop=function(){if(!this.running)throw"Can't stop NchanSubscriber, it's not running.";return this.running=!1,r&&m.removeEventListener("storage",r),this.transport.cancel(),this.shared&&(delete i[this.url],this.shared.masterIntervalCheckID&&(clearInterval(this.shared.masterIntervalCheckID),delete this.shared.masterIntervalCheckID)),this},t.prototype.SubscriberClass={websocket:function(){function t(t){WebSocket,this.emit=t}return t.prototype.websocketizeURL=function(t){var e,s=t.match(/^((\w+:)?\/\/([^\/]+))?(\/)?(.*)/),i=s[2],r=s[3],n=s[4],a=s[5];return"object"==typeof window&&(e=window.location),!i&&e&&(i=e.protocol),i="https:"==i?"wss:":"http:"==i?"ws:":"wss:",!r&&e&&(r=e.host),i+"//"+r+(a=n?"/"+a:e?e.pathname.match(/(.*\/)[^/]*/)[1]+a:"/"+a)},t.prototype.listen=function(t,e){if(t=n(t=this.websocketizeURL(t),e),this.listener)throw"websocket already listening";this.listener=new WebSocket(t,"ws+meta.nchan");var s=this.listener;s.onmessage=u(function(t){var e=t.data.match(/^id: (.*)\n(content-type: (.*)\n)?\n/m);this.emit("message",t.data.substr(e[0].length),{id:e[1],"content-type":e[3]})},this),s.onopen=u(function(t){this.emit("connect",t)},this),s.onerror=u(function(t){this.emit("error",t,s),delete this.listener},this),s.onclose=u(function(t){this.emit("__disconnect",t),delete this.listener},this)},t.prototype.cancel=function(){this.listener&&(this.listener.close(),delete this.listener)},t}(),eventsource:function(){function t(t){EventSource,this.emit=t}return t.prototype.listen=function(t,e){if(t=n(t,e),this.listener)throw"there's a ES listener running already";this.listener=new EventSource(t);var s=this.listener;s.onmessage=u(function(t){this.emit("message",t.data,{id:t.lastEventId})},this),s.onopen=u(function(t){this.reconnecting=!1,this.emit("connect",t)},this),s.onerror=u(function(t){this.listener.readyState!=EventSource.CONNECTING||this.reconnecting?this.emit("__disconnect",t):this.reconnecting||(this.reconnecting=!0,this.emit("__disconnect",t))},this)},t.prototype.cancel=function(){this.listener&&(this.listener.close(),delete this.listener)},t}(),longpoll:function(){function t(t){this.headers={},this.longPollStartTime=null,this.maxLongPollTime=3e5,this.emit=t}return t.prototype.listen=function(t,e){if(this.req)throw"already listening";t&&(this.url=t);var r,n=u(function(t,e){t&&(this.headers[e]=t)},this);return e&&(this.headers={Etag:e}),this.reqStartTime=(new Date).getTime(),r=u(function(t,e,s){if(n(s.getResponseHeader("Last-Modified"),"If-Modified-Since"),n(s.getResponseHeader("Etag"),"If-None-Match"),200<=t&&t<=210){var i=s.getResponseHeader("Content-Type");this.parseMultipartMixedMessage(i,e,s)||this.emit("message",e||"",{"content-type":i,id:this.msgIdFromResponseHeaders(s)}),this.reqStartTime=(new Date).getTime(),this.req=a.ajax({url:this.url,headers:this.headers},r)}else 0==t&&"Error"==e&&4==s.readyState||null===t&&"Abort"!=e?(this.emit("__disconnect",t||0,e),delete this.req):null!==t?(this.emit("error",t,e),delete this.req):(delete this.req,this.emit("__disconnect"))},this),this.reqStartTime=(new Date).getTime(),this.req=a.ajax({url:this.url,headers:this.headers},r),this.emit("connect"),this},t.prototype.parseMultipartMixedMessage=function(t,e,s){var i=t&&t.match(/^multipart\/mixed;\s+boundary=(.*)$/);if(!i)return!1;var r=i[1],n=e.split("--"+r);if(""!=n[0]||!n[n.length-1].match(/--\r?\n/))throw"weird multipart/mixed split";for(var a in n=n.slice(1,-1)){var o=(i=n[a].match(/^(.*)\r?\n\r?\n([\s\S]*)\r?\n$/m))[1].split("\n"),h={};for(var c in o){var l=o[c].match(/^([^:]+):\s+(.*)/);l&&"Content-Type"==l[1]&&(h["content-type"]=l[2])}a==n.length-1&&(h.id=this.msgIdFromResponseHeaders(s)),this.emit("message",i[2],h)}return!0},t.prototype.msgIdFromResponseHeaders=function(t){var e,s;return e=t.getResponseHeader("Last-Modified"),s=t.getResponseHeader("Etag"),e?Date.parse(e)/1e3+":"+(s||"0"):s||null},t.prototype.cancel=function(){return this.req&&(this.req.abort(),delete this.req),this},t}(),__slave:function(){function t(t){this.emit=t,this.doNotReconnect=!0}return t.prototype.listen=function(t,e){this.shared=e,this.statusChangeChecker=u(function(t){if(this.shared.matchEventKey(t,"msg")){var e=this.shared.get("msg:id"),s=this.shared.get("msg:content-type"),i=this.shared.get("msg");this.emit("message",i,{id:""==e?g:e,"content-type":""==s?g:s})}},this),m.addEventListener("storage",this.statusChangeChecker)},t.prototype.cancel=function(){m.removeEventListener("storage",this.statusChangeChecker)},t}()},t}(t);"object"==typeof module&&null!=module&&module.exports?module.exports=i:"function"==typeof define&&define.amd?define(function(){return i}):t.NchanSubscriber=i}("undefined"!=typeof window?window:this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
